// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutriMind.Api.Data;

#nullable disable

namespace NutriMind.Api.Migrations
{
    [DbContext(typeof(NutriMindDbContext))]
    [Migration("20250908161118_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NutriMind.Api.Models.GroceryList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategorizedItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalEstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("GroceryLists");
                });

            modelBuilder.Entity("NutriMind.Api.Models.MealPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DailyMeals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroceryListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalEstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WeekIdentifier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("WeekOf")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroceryListId");

                    b.HasIndex("UserId", "WeekIdentifier")
                        .IsUnique();

                    b.ToTable("MealPlans");
                });

            modelBuilder.Entity("NutriMind.Api.Models.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDiabeticFriendly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("NutriMind.Api.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActivityLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Allergens")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BudgetPerWeek")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CookingSkillLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CookingTimePreference")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DietaryPreference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dislikes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HealthGoals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KitchenEquipment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MealFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredCuisines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoppingPreference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SnackFrequency")
                        .HasColumnType("int");

                    b.Property<int>("TargetCalories")
                        .HasColumnType("int");

                    b.Property<int>("TargetCarbs")
                        .HasColumnType("int");

                    b.Property<int>("TargetFats")
                        .HasColumnType("int");

                    b.Property<int>("TargetProtein")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("NutriMind.Api.Models.MealPlan", b =>
                {
                    b.HasOne("NutriMind.Api.Models.GroceryList", "GroceryList")
                        .WithMany()
                        .HasForeignKey("GroceryListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("NutriMind.Api.Models.GenerationMetadata", "GenerationMetadata", b1 =>
                        {
                            b1.Property<string>("MealPlanId")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("AiModel")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("CompletedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Errors")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<TimeSpan>("GenerationTime")
                                .HasColumnType("time");

                            b1.Property<string>("OrchestrationId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("RecipesConsidered")
                                .HasColumnType("int");

                            b1.Property<DateTime>("StartedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("MealPlanId");

                            b1.ToTable("MealPlans");

                            b1.WithOwner()
                                .HasForeignKey("MealPlanId");
                        });

                    b.OwnsOne("NutriMind.Api.Models.MealPlanPreferences", "Preferences", b1 =>
                        {
                            b1.Property<string>("MealPlanId")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Allergens")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("BudgetConstraint")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("DietaryPreference")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Dislikes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("MaxPrepTime")
                                .HasColumnType("int");

                            b1.Property<int>("TargetCalories")
                                .HasColumnType("int");

                            b1.Property<string>("VarietyLevel")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MealPlanId");

                            b1.ToTable("MealPlans");

                            b1.WithOwner()
                                .HasForeignKey("MealPlanId");
                        });

                    b.OwnsOne("NutriMind.Api.Models.NutritionSummary", "WeeklyNutritionSummary", b1 =>
                        {
                            b1.Property<string>("MealPlanId")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<decimal>("AdherencePercentage")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("AverageDailyCalories")
                                .HasColumnType("int");

                            b1.Property<int>("TargetCalories")
                                .HasColumnType("int");

                            b1.Property<int>("TotalCalories")
                                .HasColumnType("int");

                            b1.Property<decimal>("TotalCarbs")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TotalFats")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TotalProtein")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("MealPlanId");

                            b1.ToTable("MealPlans");

                            b1.WithOwner()
                                .HasForeignKey("MealPlanId");
                        });

                    b.Navigation("GenerationMetadata")
                        .IsRequired();

                    b.Navigation("GroceryList");

                    b.Navigation("Preferences")
                        .IsRequired();

                    b.Navigation("WeeklyNutritionSummary")
                        .IsRequired();
                });

            modelBuilder.Entity("NutriMind.Api.Models.UserProfile", b =>
                {
                    b.OwnsOne("NutriMind.Api.Models.ConnectedServices", "ConnectedServices", b1 =>
                        {
                            b1.Property<string>("UserProfileId")
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");

                            b1.OwnsOne("NutriMind.Api.Models.ServiceConnection", "AmazonFresh", b2 =>
                                {
                                    b2.Property<string>("ConnectedServicesUserProfileId")
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("AccessToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("ConnectedAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime?>("ExpiresAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<bool>("IsConnected")
                                        .HasColumnType("bit");

                                    b2.Property<string>("RefreshToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ConnectedServicesUserProfileId");

                                    b2.ToTable("UserProfiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ConnectedServicesUserProfileId");
                                });

                            b1.OwnsOne("NutriMind.Api.Models.ServiceConnection", "Instacart", b2 =>
                                {
                                    b2.Property<string>("ConnectedServicesUserProfileId")
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("AccessToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("ConnectedAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime?>("ExpiresAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<bool>("IsConnected")
                                        .HasColumnType("bit");

                                    b2.Property<string>("RefreshToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ConnectedServicesUserProfileId");

                                    b2.ToTable("UserProfiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ConnectedServicesUserProfileId");
                                });

                            b1.OwnsOne("NutriMind.Api.Models.ServiceConnection", "Kroger", b2 =>
                                {
                                    b2.Property<string>("ConnectedServicesUserProfileId")
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("AccessToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("ConnectedAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime?>("ExpiresAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<bool>("IsConnected")
                                        .HasColumnType("bit");

                                    b2.Property<string>("RefreshToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ConnectedServicesUserProfileId");

                                    b2.ToTable("UserProfiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ConnectedServicesUserProfileId");
                                });

                            b1.OwnsOne("NutriMind.Api.Models.ServiceConnection", "WalmartGrocery", b2 =>
                                {
                                    b2.Property<string>("ConnectedServicesUserProfileId")
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("AccessToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("ConnectedAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime?>("ExpiresAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<bool>("IsConnected")
                                        .HasColumnType("bit");

                                    b2.Property<string>("RefreshToken")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ConnectedServicesUserProfileId");

                                    b2.ToTable("UserProfiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ConnectedServicesUserProfileId");
                                });

                            b1.Navigation("AmazonFresh");

                            b1.Navigation("Instacart");

                            b1.Navigation("Kroger");

                            b1.Navigation("WalmartGrocery");
                        });

                    b.OwnsOne("NutriMind.Api.Models.NotificationPreferences", "NotificationPreferences", b1 =>
                        {
                            b1.Property<string>("UserProfileId")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<bool>("EmailEnabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("GroceryReminders")
                                .HasColumnType("bit");

                            b1.Property<bool>("MealReminders")
                                .HasColumnType("bit");

                            b1.Property<bool>("NutritionInsights")
                                .HasColumnType("bit");

                            b1.Property<bool>("NutritionTips")
                                .HasColumnType("bit");

                            b1.Property<TimeSpan>("PreferredReminderTime")
                                .HasColumnType("time");

                            b1.Property<bool>("PushEnabled")
                                .HasColumnType("bit");

                            b1.Property<string>("ReminderTimes")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("ShoppingReminders")
                                .HasColumnType("bit");

                            b1.Property<bool>("WeeklyPlanGeneration")
                                .HasColumnType("bit");

                            b1.Property<bool>("WeeklyPlanReminders")
                                .HasColumnType("bit");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("ConnectedServices")
                        .IsRequired();

                    b.Navigation("NotificationPreferences")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
